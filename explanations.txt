the first command that we always need to do is to specify the base image or a known image
(image that docker has access to - is on docker hub) the base image is the official node image.
because really thats the only thing that i need to run , and anything else is needed to run node
i got my specific node version -> with node -v command

FROM node:18.14.1

this command sets our working directory of our container, he knows that /app directory exists 
in the container because he have run the node image before and he knows it got a /app directory
setting the working directory is helpful because anytime you run a command its going to run from this directory
so i can put all of our app code in /app and run node index.js file on /app

WORKDIR /app

the next thing is to copy my package.json file( which contains all the dependencies for my app ) 
into my docker image
i wrote package.json because this is the path to it because its in my root directory.
the thing after the package.json is the directory to copy it into in my image.
 the . means the current directory ( which is /app as i set before)

COPY package.json .

once i have my package.json i need to install all of the dependencies, so i need to run the command npm install
in dockerfile to run a command - use run.
RUN npm install
now all the dependencies are  installed
now i am going to copy the rest of my files and source code into my image

COPY . ./

expose the port my app listen to (port 3000)

EXPOSE 3000

when we start the container - tell it which command to run
since my app is a node app and the entry point is index.js file
so the command it need to run is node index.js

CMD [ "node","index.js" ]

so when i deploy my container its going to run index.js
 the run command - is at build time(building the image) ,
 and the cmd command is at runtime(when run the container)

to build the image now , in the terminal and stop my express server from running on my local machine,
because i am no longer going to develop on my local machine , i am going to develop in the docker container
so to build the image is the command - docker build <the path to my dockerfile which is in my corrent directory so i'll write . >
in short this is my command:

docker build .

when i run this command you can see in the output, where its looks like for example - [1/5] is doing the first command out of the 5 
in the dockerfile, which is taking the image node:18 out of docker hub . the seconed step - [2/5] - is setting the working directory 
to be /app , after the first time i'll do it - i'll see cached written brcause its caches the result of every step.
with the command:

docker image ls 

- i can see the created image. he saw that we didnt named the image - 
so he deleted the image - with the command: 

docker image rm < image id >

and now well do the build image command with a flag to name the image:

docker build -t node-app-image .

to run the image / specify the image we want to create a container from:

docker run -d --name node-app node-app-image

--name node-app -> flag for naming the container.
don't be confused , node-app-image - is the name of the image and node-app is the name for the container.
-d flag for running the container in detached mode ( to not be attached to the cli or the console - so my command line is still free)

docker ps 
 
- to see the containers data

now i'll see that when i go back to my site its not running , this is because we are unable to connect to out docker container
on localhost 3000, even though we wrote expose 3000 -> this live does nothing , this is more for documentation -> 
for telling that this image expacts you to open up port 3000 to work.
so this line doesnt open the port 3000, docker containers by default can talk to the outside world but not the opposite.
to make the outside world can talk to our docker container(which means not just the internet but also our locallhost machine - my windows machine)
we need to poke a hole at my host machine -> telling to our host machine that if we receive traffic on a specific port we want to forward that traffic to our docker container.
to kill the container:

docker rm node-app -f  

-> -f flage means force kill, because usually you need to stop a container before killing it.
the correct command is ->

docker run -p 3000:3000 -d --name node-app node-app-image


the right 3000 is the port that were going to send traffic to our container(which is the port that our container expects to get traffic on- which what i set in the express listen app port)
the left 3000 is the port my local machine gets traffic from the outside world

when i log in to my docker container - and take a look at my files in there - with the command:

docker exec -it node-app bash

-it , for interactive mode.
bash - is a command to take a look at file system of our container
by default its going to drop us in  the slash app directory 
when i insert ls command -> i will see all the files in that  directory - and will see that dockerfile and nodemodules are in this container - which we don't need 
the dockerfile is there to create an image but we don't need it in our docker container  also node modules is very large and we don't need it were doing npm install already , ( that install all the files in the package.json file)
its because the command COPY . ./ -> that copies all the files in our current directory into the image.
also there gonna be more files we don't want like .env etc.. so we need to create a dockerignore file .

now the nodemodules that in the container is from the command npm install and not from the copy command.

when ill change the code - and save when ill refresh the page , it wont be updated - this because we need to rebuild the - 
we build an image and made a container out of it , now that we change our code - but the original image didn't changed -> and so our container didnt changed
so to update it - we need to delete the container ( by force) and then build again the image. and run the container out of the image.
-> we don't want to do that every time we change the code -> we are going to use volumes. -> which allows us to have a persistence data in our containers
theres a specific volume called a bind mount in docker  -> allows us to sync a folder(or a file system) 
in our local host machine to a folder in our docker container. that takes all the files and sync them into the /app directory 
of our container so i don't need to always rebuild the image when there is changes.
for that will delete the container, and theres no need to rebuild the image , the image is fine.

we going to update the run command of the container : 
docker run -v <copy the path to the folder with the source code on my local machine>:<the folder in our docker container> -p 3000:3000 -d --name node-app node-app-image 

to make it shorter were going to use variables - its going to be different based of my operating system.
in windows cmd :
%cd% - current directory - that way i don't need to copy the entire path ( remember you can't use the . )
so the full command now is :

docker run -v %cd%:/app -p 3000:3000 -d --name node-app node-app-image 
we still need to do another step - remember in express or node app every time we change the code - we need to restart the node process.
we will install nodemon as a dev dependency. just on the local machine (npm install nodemon --save-dev)
 because we dont need it in production ,
 and also add this 2 scripts in package.json:
   "start": "node index.js",
   "dev": "nodemon index.js",

if theres any problems in windows with nodemon not actually restarting ( i may need to pass the -L flag)
so :   "dev": "nodemon -L index.js",
and also in dockerfile now we need to change the command for running the container from 
CMD [ "node","index.js" ] -> CMD [ "npm","run","dev"]

so now that we have changed the package.json file -> i need to rebuild the image now

important !!! when ill delete the local nodemodules -> the container crashes ! even thoug we are not running our code in our locall developement 
so why is that ? its because the bind volume sync this change ( the deleting of nodemodules with out container directory )
for not doing that will use another volume 





